{"version":3,"sources":["components/data-size-selection/index.js","redux/utils.js","components/loader/index.js","redux/ac/index.js","components/table-form/index.js","redux/types.js","components/table-search/index.js","components/table/index.js","components/pagination/index.js","components/table-row-details/index.js","selectors/index.js","App.js","serviceWorker.js","redux/reducers/dataReducer.js","redux/reducers/paginationReducer.js","redux/reducers/index.js","redux/store/index.js","redux/middleware/logger.js","index.js"],"names":["useStyles","makeStyles","buttonSmall","display","justifyContent","marginBottom","backgroundColor","buttonBig","container","flexDirection","paddingTop","icon","marginRight","props","classes","Container","className","maxWidth","Button","variant","size","onClick","selectData","style","marginLeft","type","color","height","width","TableForm","state","id","firstName","lastName","email","phone","isValidForm","every","isValidField","length","limits","min","getClassName","handleSubmit","event","preventDefault","addTableRow","setState","handleChange","value","target","max","this","onChange","placeholder","button","disabled","Component","connect","dispatch","newRow","payload","withStyles","theme","borderRadius","margin","boxShadow","useState","setValue","handleSearchClick","StyledTableCell","head","fontSize","palette","common","white","body","cursor","TableCell","StyledTableRow","root","TableRow","data","sortData","sortField","sort","TableContainer","Table","aria-label","TableHead","onSort","align","TableBody","map","item","key","handleRowClick","component","scope","pageCount","Math","ceil","dataForPagination","pageData","perPage","Pagination","count","page","currentPage","handlePageClick","padding","Paper","elevation","defaultValue","description","address","streetAddress","city","zip","tableDataSelector","createSelector","store","fetchedData","search","filter","toString","includes","toLowerCase","pageDataSelector","searchedData","indexOfLastPost","indexOfFirstPost","slice","library","add","faAngleUp","faAngleDown","App","changePage","searchData","rowSelected","selectRow","handleShowAddForm","showAddForm","isDataSelected","fetchData","loading","loaded","isAddingButton","dataForTable","selectItemHandler","url","FETCH_DATA","fetch","then","res","console","log","status","Error","statusText","json","response","catch","error","replace","Boolean","window","location","hostname","match","initialState","currentList","combineReducers","action","stateCopy","reorderedData","orderBy","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","next","getState","createStore","reducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c4424b4e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { smallUrl, bigUrl } from \"../../redux/utils\";\r\n\r\n// Material UI\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from '@material-ui/core/Container';\r\nimport Button from '@material-ui/core/Button';\r\nimport GetAppRoundedIcon from '@material-ui/icons/GetAppRounded';\r\n\r\nconst useStyles = makeStyles({\r\n    buttonSmall: {\r\n        display: 'flex',\r\n        justifyContent: 'left',\r\n        marginBottom: '20px',\r\n        backgroundColor: '#a5d6a7'\r\n    },\r\n    buttonBig: {\r\n        display: 'flex',\r\n        justifyContent: 'left',\r\n        marginBottom: '20px',\r\n        backgroundColor: '#ffcc80'\r\n    },\r\n    container: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        paddingTop: '100px'\r\n    },\r\n    icon: {\r\n        marginRight: '10px'\r\n    }\r\n});\r\n\r\nexport default (props) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Container className={classes.container} maxWidth=\"sm\">\r\n            <Button\r\n                className={classes.buttonSmall}\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                onClick={() => props.selectData(smallUrl)}\r\n            >\r\n                <GetAppRoundedIcon className={classes.icon} />\r\n                Загрузить маленький объем данных <b style={{ marginLeft: '5px' }}>(32 элемента)</b>\r\n            </Button>\r\n            <Button\r\n                className={classes.buttonBig}\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                onClick={() => props.selectData(bigUrl)}\r\n            >\r\n                <GetAppRoundedIcon className={classes.icon} />\r\n                Загрузить большой объем данных <b style={{ marginLeft: '5px' }}>(1000 элементов)</b>\r\n            </Button>\r\n        </Container>\r\n    )\r\n}","export const smallUrl = 'https://api.codetabs.com/v1/proxy/?quest=http://www.filltext.com/?rows=32&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D'\r\nexport const bigUrl = 'https://api.codetabs.com/v1/proxy/?quest=http://www.filltext.com/?rows=1000&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&delay=3&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D'","import React from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\n// Material UI\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        paddingTop: '100px'\r\n    }\r\n});\r\n\r\nexport default props => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Container className={classes.container} maxWidth=\"sm\">\r\n            <Loader\r\n                type=\"Oval\"\r\n                color=\"#9e9e9e\"\r\n                height={100}\r\n                width={100}\r\n            />\r\n        </Container>\r\n    )\r\n}","import {\r\n    START,\r\n    SUCCESS,\r\n    FAIL,\r\n    FETCH_DATA,\r\n    SORT_DATA,\r\n    ADD_TABLE_ROW,\r\n    CHANGE_PAGINATION_PAGE,\r\n    SEARCH_DATA,\r\n    TOGGLE_ADD_FORM,\r\n    SELECT_ROW\r\n} from \"../types\";\r\n\r\nimport { replace } from \"connected-react-router\";\r\n\r\n// Загрузка данных с сервера\r\nexport function fetchData(url) {\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: FETCH_DATA + START,\r\n        })\r\n        fetch(url)\r\n            .then(res => {\r\n                console.log(res);\r\n                if (res.status >= 400) {\r\n                    throw new Error(res.statusText)\r\n                }\r\n                return res.json()\r\n            })\r\n            .then(response => dispatch({\r\n                type: FETCH_DATA + SUCCESS,\r\n                response\r\n            }))\r\n            .catch(error => {\r\n                dispatch(replace('/error'))\r\n                dispatch({\r\n                    type: FETCH_DATA + FAIL,\r\n                    error\r\n                })\r\n            })\r\n    }\r\n}\r\n\r\n// Сортировка столбца по убыванию или возрастанию\r\nexport const sortData = (sortField) => {\r\n    console.log('sortData')\r\n    return {\r\n        type: SORT_DATA,\r\n        payload: {sortField}\r\n    }\r\n}\r\n\r\n// Добавление элемента в таблицу\r\nexport const addTableRow = (newRow) => {\r\n    return {\r\n        type: ADD_TABLE_ROW,\r\n        payload: {newRow}\r\n    }\r\n}\r\n\r\n// Пагинация\r\nexport const changePage = (page) => {\r\n    return {\r\n        type: CHANGE_PAGINATION_PAGE,\r\n        payload: {page}\r\n    }\r\n}\r\n\r\n// Поиск элемента\r\nexport const searchData = (search) => {\r\n    console.log(search)\r\n    return {\r\n        type: SEARCH_DATA,\r\n        payload: {search}\r\n    }\r\n}\r\n\r\n// Выбор элемента для отображения под таблицей\r\nexport const selectRow = (rowSelected) => {\r\n    return {\r\n        type: SELECT_ROW,\r\n        payload: {rowSelected}\r\n    }\r\n}\r\n\r\n// Показ формы для добавления элемента в таблицу\r\nexport const showAddForm = () => {\r\n    return {\r\n        type: TOGGLE_ADD_FORM\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport \"./style.css\"\r\nimport { connect } from \"react-redux\";\r\nimport { addTableRow } from \"../../redux/ac\";\r\n\r\n// Material UI\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst styles = theme => ({\r\n    button: {\r\n        borderRadius: 0,\r\n        margin: '10px auto',\r\n        color: '#ffffff',\r\n        backgroundColor: '#43a047'\r\n    }\r\n});\r\n\r\nclass TableForm extends Component {\r\n    state = {\r\n        id: '',\r\n        firstName: '',\r\n        lastName: '',\r\n        email: '',\r\n        phone: ''\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props\r\n\r\n        return (\r\n            <form className=\"form-container\">\r\n                <div>\r\n                    <input\r\n                        className={this.getClassName('id')}\r\n                        value={this.state.id}\r\n                        onChange={this.handleChange('id')}\r\n                        placeholder=\"id...\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <input\r\n                        className={this.getClassName('firstName')}\r\n                        value={this.state.firstName}\r\n                        onChange={this.handleChange('firstName')}\r\n                        placeholder=\"first name...\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <input\r\n                        className={this.getClassName('lastName')}\r\n                        value={this.state.lastName}\r\n                        onChange={this.handleChange('lastName')}\r\n                        placeholder=\"last name...\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <input\r\n                        className={this.getClassName('email')}\r\n                        value={this.state.email}\r\n                        onChange={this.handleChange('email')}\r\n                        placeholder=\"email...\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <input\r\n                        className={this.getClassName('phone')}\r\n                        value={this.state.phone}\r\n                        onChange={this.handleChange('phone')}\r\n                        placeholder=\"phone...\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button\r\n                        className={classes.button}\r\n                        variant=\"contained\"\r\n                        disabled={!this.isValidForm()}\r\n                        onClick={this.handleSubmit}\r\n                    >\r\n                        Добавить\r\n                    </Button>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n\r\n    isValidForm = () => ['id', 'firstName', 'lastName', 'email', 'phone'].every(this.isValidField)\r\n\r\n    isValidField = (type) => this.state[type].length >= limits[type].min\r\n\r\n    getClassName = (type) => (this.isValidField(type) ? 'input-form' : 'input-form__error')\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        this.props.addTableRow(this.state)\r\n        this.setState({\r\n            id: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n            phone: ''\r\n        })\r\n    }\r\n\r\n    handleChange = (type) => (event) => {\r\n        const {value} = event.target\r\n        if (value.length > limits[type].max) return\r\n        this.setState({\r\n            [type]: value\r\n        })\r\n    }\r\n}\r\n\r\nconst limits = {\r\n    id: {\r\n        min: 3,\r\n        max: 20\r\n    },\r\n    firstName: {\r\n        min: 3,\r\n        max: 20\r\n    },\r\n    lastName: {\r\n        min: 3,\r\n        max: 20\r\n    },\r\n    email: {\r\n        min: 3,\r\n        max: 20\r\n    },\r\n    phone: {\r\n        min: 3,\r\n        max: 20\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    null,\r\n    (dispatch) => ({\r\n        addTableRow: (newRow) => dispatch(addTableRow(newRow))\r\n    })\r\n)(withStyles(styles)(TableForm))\r\n\r\n","export const FETCH_DATA = 'FETCH_DATA'\r\nexport const ADD_TABLE_ROW = 'ADD_TABLE_ROW'\r\nexport const SORT_DATA = 'SORT_DATA'\r\nexport const CHANGE_PAGINATION_PAGE = 'CHANGE_PAGINATION_PAGE'\r\nexport const SEARCH_DATA = 'SEARCH_DATA'\r\nexport const TOGGLE_ADD_FORM = 'TOGGLE_ADD_FORM'\r\nexport const SELECT_ROW = 'SELECT_ROW'\r\n\r\nexport const START = '_START'\r\nexport const SUCCESS = '_SUCCESS'\r\nexport const FAIL = '_FAIL'","import React, { useState } from \"react\";\r\nimport \"./style.css\"\r\n\r\n//Material UI\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        borderRadius: 0,\r\n        boxShadow: 'none',\r\n        color: '#f9f9f9',\r\n        backgroundColor: '#757575'\r\n    }\r\n});\r\n\r\nexport default props => {\r\n    const classes = useStyles()\r\n    const [value, setValue] = useState('')\r\n\r\n    const handleChange = event => {\r\n        setValue(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className=\"search-container\">\r\n            <Button\r\n                className={classes.button}\r\n                variant=\"contained\"\r\n                onClick={() => props.handleSearchClick(value)}\r\n            >\r\n                Найти\r\n            </Button>\r\n            <input\r\n                className=\"input-search\"\r\n                type=\"text\"\r\n                onChange={handleChange}\r\n                value={value}\r\n                placeholder=\"поиск...\"\r\n            />\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\n// Material UI\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        fontSize: 14,\r\n        /*fontWeight: 600,*/\r\n        backgroundColor: '#757575',\r\n        color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n        fontSize: 14,\r\n        cursor: 'pointer'\r\n    },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: '#eeeeee',\r\n            cursor: 'pointer'\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\nexport default props => {\r\n    const {data, sortData: {sortField, sort}} = props\r\n\r\n    return (\r\n        <TableContainer>\r\n            <Table size=\"small\" aria-label=\"a dense table\">\r\n                <TableHead>\r\n                    <StyledTableRow>\r\n                        <StyledTableCell\r\n                            onClick={() => props.onSort('id')}\r\n                        >\r\n                            ID {sortField === 'id' && sort === 'asc'\r\n                            ? <FontAwesomeIcon className=\"icon\" icon=\"angle-up\"/>\r\n                            : <FontAwesomeIcon className=\"icon\" icon=\"angle-down\"/>}\r\n                        </StyledTableCell>\r\n                        <StyledTableCell\r\n                            onClick={() => props.onSort('firstName')}\r\n                            align=\"left\"\r\n                        >\r\n                            First name {sortField === 'firstName' && sort === 'asc'\r\n                            ? <FontAwesomeIcon className=\"icon\" icon=\"angle-up\"/>\r\n                            : <FontAwesomeIcon className=\"icon\" icon=\"angle-down\"/>}\r\n                        </StyledTableCell>\r\n                        <StyledTableCell\r\n                            onClick={() => props.onSort('lastName')}\r\n                            align=\"left\"\r\n                        >\r\n                            Last name {sortField === 'lastName' && sort === 'asc'\r\n                            ? <FontAwesomeIcon className=\"icon\" icon=\"angle-up\"/>\r\n                            : <FontAwesomeIcon className=\"icon\" icon=\"angle-down\"/>}\r\n                        </StyledTableCell>\r\n                        <StyledTableCell\r\n                            onClick={() => props.onSort('email')}\r\n                            align=\"left\"\r\n                        >\r\n                            Email {sortField === 'email' && sort === 'asc'\r\n                            ? <FontAwesomeIcon className=\"icon\" icon=\"angle-up\"/>\r\n                            : <FontAwesomeIcon className=\"icon\" icon=\"angle-down\"/>}\r\n                        </StyledTableCell>\r\n                        <StyledTableCell\r\n                            onClick={() => props.onSort('phone')}\r\n                            align=\"left\"\r\n                        >\r\n                            Phone {sortField === 'phone' && sort === 'asc'\r\n                            ? <FontAwesomeIcon className=\"icon\" icon=\"angle-up\"/>\r\n                            : <FontAwesomeIcon className=\"icon\" icon=\"angle-down\"/>}\r\n                        </StyledTableCell>\r\n                    </StyledTableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {data.map(item =>\r\n                        <StyledTableRow\r\n                            key={item.phone}\r\n                            onClick={() => props.handleRowClick(item)}\r\n                        >\r\n                            <StyledTableCell component=\"th\" scope=\"row\">{item.id}</StyledTableCell>\r\n                            <StyledTableCell align=\"left\">{item.firstName}</StyledTableCell>\r\n                            <StyledTableCell align=\"left\">{item.lastName}</StyledTableCell>\r\n                            <StyledTableCell align=\"left\">{item.email}</StyledTableCell>\r\n                            <StyledTableCell align=\"left\">{item.phone}</StyledTableCell>\r\n                        </StyledTableRow>\r\n                    )}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\n\r\n","import React from \"react\";\r\n\r\n// Material UI\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        margin: '20px auto'\r\n    }\r\n}));\r\n\r\nexport default props => {\r\n    const classes = useStyles()\r\n    const pageCount = Math.ceil(props.dataForPagination.length / props.pageData.perPage)\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <Pagination\r\n                count={pageCount}\r\n                page={props.pageData.currentPage}\r\n                onChange={props.handlePageClick}\r\n                color=\"primary\"\r\n            />\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\n// Material UI\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'left',\r\n        maxWidth: '500px',\r\n        margin: '0 auto 50px auto',\r\n        padding: '20px 20px 15px 20px',\r\n        '& div': {\r\n            marginBottom: '5px'\r\n        }\r\n    }\r\n});\r\n\r\nexport default ({item}) => {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Paper className={classes.container} elevation={6}>\r\n            <div>Выбран пользователь <b>{item.firstName + ' ' + item.lastName}</b></div>\r\n            <div>Описание: <br/><textarea defaultValue={item.description}/></div>\r\n            <div>Адрес проживания: <b>{item.address.streetAddress}</b></div>\r\n            <div>Город: <b>{item.address.city}</b></div>\r\n            <div>Провинция/штат: <b>{item.address.state}</b></div>\r\n            <div>Индекс: <b>{item.address.zip}</b></div>\r\n        </Paper>\r\n    )\r\n}","import { createSelector } from \"reselect\";\r\n\r\nexport const dataSelector = (store) => store.data.fetchedData\r\nexport const searchSelector = (store) => store.data.search\r\nexport const paginationSelector = (store) => store.pageData\r\n\r\n// Фильтрация данных при поиске элемента для отображения в таблице\r\nexport const tableDataSelector = createSelector(\r\n    dataSelector,\r\n    searchSelector,\r\n    (fetchedData, search) => {\r\n        // Если в поиске ничего нет, то возвращаем данные с сервера\r\n        if (!search) {\r\n            return fetchedData\r\n        }\r\n\r\n        // Фильтрация данных при поиске, проверка на наличие подстроки\r\n        return fetchedData.filter(item => {\r\n            return item['id'].toString().includes(search.toString())\r\n                || item['phone'].toString().includes(search.toString())\r\n                || item['firstName'].toLowerCase().includes(search.toLowerCase())\r\n                || item['lastName'].toLowerCase().includes(search.toLowerCase())\r\n                || item['email'].toLowerCase().includes(search.toLowerCase())\r\n        })\r\n    }\r\n)\r\n\r\n// Пагинация с учетом отфильтрованных элементов при поиске\r\nexport const pageDataSelector = createSelector(\r\n    tableDataSelector,\r\n    paginationSelector,\r\n    (searchedData, pageData) => {\r\n        const indexOfLastPost = pageData.currentPage * pageData.perPage;\r\n        const indexOfFirstPost = indexOfLastPost - pageData.perPage;\r\n        const currentList = searchedData.slice(indexOfFirstPost, indexOfLastPost);\r\n\r\n        return currentList\r\n    }\r\n)\r\n\r\n\r\n\r\n\r\n","import React, { Component, Fragment } from \"react\";\nimport \"./App.css\"\nimport DataSize from \"./components/data-size-selection\"\nimport Loader from \"./components/loader\";\nimport TableForm from \"./components/table-form\";\nimport TableSearch from \"./components/table-search\";\nimport Table from \"./components/table\";\nimport Pagination from \"./components/pagination\";\nimport TableRowDetails from \"./components/table-row-details\";\n\nimport { connect } from \"react-redux\";\nimport { fetchData, sortData, changePage, searchData, showAddForm, selectRow } from \"./redux/ac\";\nimport { tableDataSelector, pageDataSelector } from \"./selectors\";\n\nimport Container from '@material-ui/core/Container';\nimport Button from \"@material-ui/core/Button\";\n\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faAngleUp, faAngleDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nlibrary.add(faAngleUp, faAngleDown)\n\nconst styles = theme => ({\n    container: {\n        maxWidth: '1000px',\n        paddingTop: '50px'\n    },\n    isAddingButton: {\n        display: 'block',\n        width: '250px',\n        margin: '20px auto',\n        borderRadius: 0,\n    }\n});\n\nclass App extends Component {\n    render() {\n        const { data, classes } = this.props\n\n        return (\n            <Container className={classes.container}>\n                {!data.isDataSelected ?\n                    <DataSize\n                        selectData={this.props.fetchData}\n                    /> : null\n                }\n\n                {data.loading ? <Loader /> : null}\n\n                {data.loaded ? (\n                    <Fragment>\n                        <Button className={classes.isAddingButton} variant=\"contained\" color=\"primary\"\n                                onClick={this.handleShowAddForm}>Добавить ряд в таблицу</Button>\n                        {\n                            data.showAddForm ? <TableForm /> : null\n                        }\n                        <TableSearch handleSearchClick={this.handleSearchClick}/>\n                        <Table\n                            sortData={data}\n                            data={this.props.dataForTable}\n                            onSort={this.props.sortData}\n                            selectItemHandler={this.selectItemHandler}\n                            handleRowClick={this.handleRowClick}\n                        />\n                        <Pagination\n                            pageData={this.props.pageData}\n                            dataForPagination={this.props.dataForPagination}\n                            handlePageClick={this.handlePageClick}\n                        />\n                    </Fragment>) : null\n                }\n\n                {data.rowSelected\n                    ? <TableRowDetails\n                        item={data.rowSelected}\n                    /> : null\n                }\n            </Container>\n        )\n    }\n\n    // Пагинация\n    handlePageClick = (event, value) => {\n        this.props.changePage(value)\n    }\n\n    // Поиск элемента\n    handleSearchClick = search => {\n        this.props.searchData(search)\n    }\n\n    // Выбор элемента для отображения под таблицей\n    handleRowClick = rowSelected => {\n        this.props.selectRow(rowSelected)\n    }\n\n    // Показ формы для добавления элемента в таблицу\n    handleShowAddForm = () => {\n        this.props.showAddForm()\n    }\n}\n\nconst mapStateToProps = store => ({\n    data: store.data,\n    pageData: store.pageData,\n    dataForPagination: tableDataSelector(store),\n    dataForTable: pageDataSelector(store)\n})\n\nconst mapDispatchToProps = dispatch => ({\n    fetchData: (url) => dispatch(fetchData(url)),\n    sortData: (sortField) => dispatch(sortData(sortField)),\n    changePage: (page) => dispatch(changePage(page)),\n    searchData: (search) => dispatch(searchData(search)),\n    showAddForm: () => dispatch(showAddForm()),\n    selectRow: (rowSelected) => dispatch(selectRow(rowSelected))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    START,\r\n    SUCCESS,\r\n    FAIL,\r\n    FETCH_DATA,\r\n    SORT_DATA,\r\n    ADD_TABLE_ROW,\r\n    SEARCH_DATA,\r\n    TOGGLE_ADD_FORM,\r\n    SELECT_ROW\r\n} from \"../types\";\r\n\r\nimport { orderBy } from \"lodash\";\r\n\r\nconst initialState = {\r\n    fetchedData: [],\r\n    loading: false,\r\n    loaded: false,\r\n    error: null,\r\n    isDataSelected: false,\r\n    sort: '',\r\n    sortField: '',\r\n    search: '',\r\n    showAddForm: false,\r\n    rowSelected: null\r\n}\r\n\r\nexport const dataReducer = (state = initialState, action) => {\r\n    const { type, error, response, payload } = action\r\n\r\n    switch (type) {\r\n        case FETCH_DATA + START:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                isDataSelected: true\r\n            }\r\n\r\n        case FETCH_DATA + SUCCESS:\r\n            return {\r\n                ...state,\r\n                fetchedData: response,\r\n                loading: false,\r\n                loaded: true\r\n            }\r\n\r\n        case FETCH_DATA + FAIL:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                loaded: false,\r\n                error: error\r\n            }\r\n\r\n        case SORT_DATA:\r\n            const stateCopy = [...state.fetchedData]\r\n            const sort = state.sort === 'asc' ? 'desc' : 'asc'\r\n            const reorderedData = orderBy(stateCopy, payload.sortField, sort)\r\n\r\n            return {\r\n                ...state,\r\n                fetchedData: reorderedData,\r\n                sort: sort,\r\n                sortField: payload.sortField\r\n            }\r\n\r\n        case ADD_TABLE_ROW:\r\n            return {\r\n                ...state,\r\n                fetchedData: [payload.newRow, ...state.fetchedData]\r\n            }\r\n\r\n        case SEARCH_DATA:\r\n            return {\r\n                ...state,\r\n                search: payload.search\r\n            }\r\n\r\n        case TOGGLE_ADD_FORM:\r\n            return {\r\n                ...state,\r\n                showAddForm: !state.showAddForm\r\n            }\r\n\r\n        case SELECT_ROW:\r\n            return {\r\n                ...state,\r\n                rowSelected: payload.rowSelected\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { CHANGE_PAGINATION_PAGE } from \"../types\";\r\n\r\nconst initialState = {\r\n    currentPage: 1,\r\n    perPage: 50,\r\n    currentList: [],\r\n}\r\n\r\nexport const paginationReducer = (state = initialState, action) => {\r\n    const { type, payload } = action\r\n\r\n    switch (type) {\r\n        case CHANGE_PAGINATION_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: payload.page\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport { dataReducer } from \"./dataReducer\";\r\nimport { paginationReducer } from \"./paginationReducer\";\r\n\r\nexport default combineReducers({\r\n    data: dataReducer,\r\n    pageData: paginationReducer\r\n})","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport reducer from \"../reducers\";\r\nimport logger from \"../middleware/logger\";\r\n\r\nconst composeEnhancers =\r\n    typeof window === 'object' &&\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\r\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n            // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\r\n        }) : compose;\r\n\r\nconst enhancer = composeEnhancers(\r\n    applyMiddleware(\r\n        thunk,\r\n        logger\r\n    )\r\n);\r\n\r\nconst store = createStore(reducer, enhancer);\r\n\r\nexport default store","export default store => next => action => {\r\n    console.log('before', store.getState());\r\n    console.log('dispatching', action);\r\n    next(action);\r\n    console.log('after', store.getState())\r\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}